<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Data</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Data.AggregateRoot`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.IAggregateRoot"/> interface
            </summary>
            <typeparam name="TKey">The type of key used to uniquely identify the <see cref="T:Neuroglia.Data.IAggregateRoot"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.AggregateRoot`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.AggregateRoot`1"/>
            </summary>
            <param name="id">The <see cref="T:Neuroglia.Data.AggregateRoot`1"/>'s unique identifier</param>
        </member>
        <member name="P:Neuroglia.Data.AggregateRoot`1.PendingEvents">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.AggregateRoot`1.RegisterEvent``1(``0)">
            <summary>
            Registers the specified <see cref="T:Neuroglia.Data.IDomainEvent"/>
            </summary>
            <typeparam name="TEvent">The type of <see cref="T:Neuroglia.Data.IDomainEvent"/> to register</typeparam>
            <param name="e">The <see cref="T:Neuroglia.Data.IDomainEvent"/> to register</param>
            <returns>The registered <see cref="T:Neuroglia.Data.IDomainEvent"/></returns>
        </member>
        <member name="M:Neuroglia.Data.AggregateRoot`1.ClearPendingEvents">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.DomainArgumentException">
            <summary>
            Represents an argument-related <see cref="T:Neuroglia.Data.DomainException"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainArgumentException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="argumentName">The argument name</param>
        </member>
        <member name="M:Neuroglia.Data.DomainArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainArgumentException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="argumentName">The argument name</param>
            <param name="innerException">The inner exception, if any</param>
        </member>
        <member name="P:Neuroglia.Data.DomainArgumentException.ArgumentName">
            <summary>
            Gets the name of the argument at the origin of the exception
            </summary>
        </member>
        <member name="T:Neuroglia.Data.DomainEvent`2">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.IDomainEvent`2"/> interface
            </summary>
            <typeparam name="TAggregate">The type of <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></typeparam>
            <typeparam name="TKey">The type of key used to uniquely identify the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.DomainEvent`2.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainEvent`2"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainEvent`2.#ctor(`1)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainEvent`2"/>
            </summary>
            <param name="aggregateId">The id of the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></param>
        </member>
        <member name="P:Neuroglia.Data.DomainEvent`2.AggregateId">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.DomainEvent`2.AggregateType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.DomainEvent`2.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.DomainException">
            <summary>
            Represents a domain-related <see cref="T:System.Exception"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainException.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainException"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
        </member>
        <member name="M:Neuroglia.Data.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentCannotBeADateInTheFuture(System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument is a date in the future
            </summary>
            <param name="argumentName">The name of the argument</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument is a date in the future</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentCannotBeADateInThePast(System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument is a date in the past
            </summary>
            <param name="argumentName">The name of the argument</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument is a date in the past</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentNull(System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a null argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a null argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentNullOrWhitespace(System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a null or whitespace argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a null or whitespace argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidAddress(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid address argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid address</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid address argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidEmail(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid email argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid email</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid email argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidIso3166CountryCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid two-letter ISO 3166 country code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 3166 country code</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid ISO 6391 language code argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidIso6391LanguageCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid ISO 6391 language code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 6391 language code</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid ISO 6391 language code argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidIso4217CurrencyCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid ISO 4217 currency code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 4217 currency code</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid ISO 4217 currency code argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidPhoneNumber(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid phone number argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid address</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid phone number argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidPhoneNumberPrefix(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid phone number prefix argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid phone number prefix</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid phone number prefix argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidTimeZoneId(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid time zone id argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid time zone id</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid time zone id argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsInvalidUri(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid uri argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid uri</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an invalid uri argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentIsUnsupportedValue(System.String,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified argument
            </summary>
            <param name="argumentName">The name of the argument that has an unsupported value</param>
            <param name="value">The unsupported value</param>
            <param name="supportedValues">An array containing the supported values</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherThan(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherThan(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherThan(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeEarlierThan(System.String,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="time">The time the argument must be lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeEarlierThan(System.String,System.DateTime)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified date and time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="date">The date and time the argument must be lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified date and time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeEarlierThan(System.String,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified date and time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="date">The date and time the argument must be lower than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be lower than the specified date and time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLaterThan(System.String,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="time">The time the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLaterThan(System.String,System.DateTime)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified date and time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="date">The date and time the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified date and time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeLaterThan(System.String,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified date and time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="date">The date and time the argument must be higher than</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be higher than the specified date and time</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustHaveMinimumLengthOf(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that doesn't have the minimum required length
            </summary>
            <param name="argumentName">The name of the argument that does not have the minimum required length</param>
            <param name="length">The minimum required length</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that doesn't have the minimum required length</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustHaveMaximumLengthOf(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument has a length higher than the maximum authorized length
            </summary>
            <param name="argumentName">The name of the argument has a length higher than the maximum authorized length</param>
            <param name="length">The minimum required length</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument has a length higher than the maximum authorized length</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeComprisedBetweenIncluding(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeComprisedBetweenIncluding(System.String,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeComprisedBetweenIncluding(System.String,System.Decimal,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for an argument that must be comprised between the specified values</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ArgumentMustBeNumeric(System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a non-numeric argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainArgumentException"/> for a non-numeric argument</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.DeletionNotSupported(System.Type)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when deletion of the specified entity type is not supported
            </summary>
            <param name="entityType">The type of entity for which deletion is not supported</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when deletion of the specified entity type is not supported</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.EntityAlreadyExists(System.Type,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityType">The type of entity that already exists</param>
            <param name="key">The key of the entity that already exists</param>
            <param name="keyProperty">The name of the entity's key property</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.EntityAlreadyExists(System.String,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityTypeName">The name of the type of entity that already exists</param>
            <param name="key">The key of the entity that already exists</param>
            <param name="keyProperty">The name of the entity's key property</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.EntityAlreadyExists(System.Type,System.String[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityType">The type of entity that already exists</param>
            <param name="properties">An array containing the names of the properties of the entity that already exists</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.EntityAlreadyExists(System.String,System.String[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityTypeName">The name of the type of entity that already exists</param>
            <param name="properties">An array containing the names of the properties of the entity that already exists</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.FilteringNotAllowed(System.Type)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when filtering is not allowed for the specified entity type
            </summary>
            <param name="entityType">The entity type for which filtering is not allow</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/></returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.InvalidCast(System.Type,System.Type)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an invalid cast occured
            </summary>
            <param name="from">The type from which the cast occured</param>
            <param name="to">The type to which the cast occured</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/></returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.MissingProperty(System.Type,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when a property cannot be found on a type
            </summary>
            <param name="type">The type that is missing the specified property</param>
            <param name="property">The property that is missing from the specified type</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/></returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NotSupported(System.Type,System.Object)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified type
            </summary>
            <param name="type">The type for which an unsupported value has been supplied</param>
            <param name="value">The unsupported value</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified type</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NotSupported(System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified type
            </summary>
            <param name="typeName">The name of the type for which an unsupported value has been supplied</param>
            <param name="value">The unsupported value</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an unsupported value has been supplied for the specified type</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NullReference(System.Type,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityType">The type of the entity that could not be found</param>
            <param name="key">The key of the entity that could not be found</param>
            <param name="keyProperty">The name of the key property</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NullReference(System.String,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityTypeName">The name of the type of the entity that could not be found</param>
            <param name="key">The key of the entity that could not be found</param>
            <param name="keyProperty">The name of the key property</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NullReference(System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityType">The type of the entity that could not be found</param>
            <param name="keyValues">An array containing the name/value pairs of the entity's keys</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.NullReference(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityTypeName">The name of the type of the entity that could not be found</param>
            <param name="keyValues">An array containing the name/value pairs of the entity's keys</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.UnexpectedState(System.Type,System.Object,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity is in an unexpected state
            </summary>
            <param name="entityType">The type of entity that is in an unexpected state</param>
            <param name="key">The key of the entity that is in an unexpected state</param>
            <param name="state">The entity's state</param>
            <param name="keyProperty">The name of the entity's key property. Defaults to 'id'</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/></returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.UnexpectedValue(System.Type,System.Object,System.Object,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainException"/> thrown when an entity has an unexpected value
            </summary>
            <param name="entityType">The type of entity that has an unexpected value</param>
            <param name="key">The key of the entity that is in an unexpected state</param>
            <param name="value">The entity's value</param>
            <param name="valueProperty">The name of the entity's property that has an unexpected value</param>
            <param name="keyProperty">The name of the entity's key property. Defaults to 'id'</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainException"/></returns>
        </member>
        <member name="M:Neuroglia.Data.DomainException.ValidationFailed(Neuroglia.Error[])">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.DomainValidationException"/> thrown when the validation of an entity failed
            </summary>
            <param name="errors">An array containing the <see cref="T:Neuroglia.Error"/>s that describe the validation failures</param>
            <returns>A new <see cref="T:Neuroglia.Data.DomainValidationException"/> thrown when the validation of an entity failed</returns>
        </member>
        <member name="T:Neuroglia.Data.DomainNullReferenceException">
            <summary>
            Represents a <see cref="T:Neuroglia.Data.DomainException"/> thrown when the application failed to resolve a reference to an object
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainNullReferenceException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
        </member>
        <member name="M:Neuroglia.Data.DomainNullReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainNullReferenceException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:Neuroglia.Data.DomainValidationException">
            <summary>
            Represents a <see cref="T:Neuroglia.Data.DomainException"/> thrown whenever the validation of an entity has failed
            </summary>
        </member>
        <member name="M:Neuroglia.Data.DomainValidationException.#ctor(Neuroglia.Error[])">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.DomainValidationException"/>
            </summary>
            <param name="errors">An array containing the <see cref="T:Neuroglia.Error"/>s that describe the validation failures</param>
        </member>
        <member name="P:Neuroglia.Data.DomainValidationException.ValidationErrors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the <see cref="T:Neuroglia.Error"/>s that describe the validation failures
            </summary>
        </member>
        <member name="T:Neuroglia.Data.Entity`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.IEntity"/> interface
            </summary>
            <typeparam name="TKey">The type of key used to uniquely identify the <see cref="T:Neuroglia.Data.IEntity"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.Entity`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Entity`1"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Entity`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Entity`1"/>
            </summary>
            <param name="id">The <see cref="T:Neuroglia.Data.IEntity"/>'s unique key</param>
        </member>
        <member name="P:Neuroglia.Data.Entity`1.Id">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Entity`1.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Entity`1.LastModified">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Entity`1.StateVersion">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IServiceCollectionExtensions.AddPluralizer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds and configures a new <see cref="T:Neuroglia.Data.Pluralizer"/> service
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Data.IAggregateRoot">
            <summary>
            Defines the fundamentals of an aggregate root
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IAggregateRoot.PendingEvents">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the <see cref="T:Neuroglia.Data.IAggregateRoot"/>'s pending <see cref="T:Neuroglia.Data.IDomainEvent"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IAggregateRoot.ClearPendingEvents">
            <summary>
            Clears all pending <see cref="T:Neuroglia.Data.IDomainEvent"/>
            </summary>
        </member>
        <member name="T:Neuroglia.Data.IAggregateRoot`1">
            <summary>
            Defines the fundamentals of an aggregate root
            </summary>
            <typeparam name="TKey">The type of key used to uniquely identify the <see cref="T:Neuroglia.Data.IAggregateRoot"/></typeparam>
        </member>
        <member name="T:Neuroglia.Data.IDomainEvent">
            <summary>
            Defines the fundamentals of a domain event, that is an event bounded to a specific domain context
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IDomainEvent.AggregateType">
            <summary>
            Gets the type of the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IDomainEvent.AggregateId">
            <summary>
            Gets the id of the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IDomainEvent.CreatedAt">
            <summary>
            Gets the date and time the <see cref="T:Neuroglia.Data.IDomainEvent"/> has been created at
            </summary>
        </member>
        <member name="T:Neuroglia.Data.IDomainEvent`1">
            <summary>
            Defines the fundamentals of a domain event, that is an event bounded to a specific domain context
            </summary>
            <typeparam name="TAggregate">The type of <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></typeparam>
        </member>
        <member name="T:Neuroglia.Data.IDomainEvent`2">
            <summary>
            Defines the fundamentals of a domain event, that is an event bounded to a specific domain context
            </summary>
            <typeparam name="TAggregate">The type of <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></typeparam>
            <typeparam name="TKey">The type of key used to uniquely identify the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/></typeparam>
        </member>
        <member name="P:Neuroglia.Data.IDomainEvent`2.AggregateId">
            <summary>
            Gets the key of the <see cref="T:Neuroglia.Data.IAggregateRoot"/> that has produced the <see cref="T:Neuroglia.Data.IDomainEvent"/>
            </summary>
        </member>
        <member name="T:Neuroglia.Data.IEntity">
            <summary>
            Defines the fundamentals of an entity
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IEntity.CreatedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Neuroglia.Data.IEntity"/> has been created
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IEntity.LastModified">
            <summary>
            Gets the date and time at which the <see cref="T:Neuroglia.Data.IEntity"/> has last been modified
            </summary>
        </member>
        <member name="P:Neuroglia.Data.IEntity.StateVersion">
            <summary>
            Gets the entity's version
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IEntity.SetVersion(System.Int32)">
            <summary>
            Sets the <see cref="T:Neuroglia.Data.IEntity"/>'s version
            </summary>
            <param name="version">The <see cref="T:Neuroglia.Data.IEntity"/>'s version</param>
        </member>
        <member name="T:Neuroglia.Data.IEntity`1">
            <summary>
            Defines the fundamentals of an entity
            </summary>
        </member>
        <member name="T:Neuroglia.Data.IPatchable">
            <summary>
            Defines the fundamentals of an object that can be patched
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IPatchable.TryGetPatch(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument@)">
            <summary>
            Attempts to get the current <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/>
            </summary>
            <param name="patch">The current <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/>, if any</param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.Data.IPatchable"/> has a pending patch</returns>
        </member>
        <member name="T:Neuroglia.Data.IRepository">
            <summary>
            Defines the fundamentals of a service used to manage data
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IRepository.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Finds the entity with the specified key
            </summary>
            <param name="key">The key of the entity to find</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The entity with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Finds the entity with the specified key values
            </summary>
            <param name="keyValues">The key values of the entity to find</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The entity with the specified key values</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.AddAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Adds the specified entity to the <see cref="T:Neuroglia.Data.IRepository"/>
            </summary>
            <param name="entity">The entity to add</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The newly added entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the specified entity
            </summary>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The updated entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Removes the specified entity from the <see cref="T:Neuroglia.Data.IRepository"/>
            </summary>
            <param name="entity">The entity to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The removed entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.ContainsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Determines whether or not the <see cref="T:Neuroglia.Data.IRepository"/> contains an entity with the specified key
            </summary>
            <param name="key">The key to check</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.Data.IRepository`1"/> contains an entity with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all entities contained in the <see cref="T:Neuroglia.Data.IRepository"/>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> containing all the entities contained in the <see cref="T:Neuroglia.Data.IRepository`1"/></returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.AsQueryable">
            <summary>
            Queries the <see cref="T:Neuroglia.Data.IRepository"/>
            </summary>
            <returns>A new <see cref="T:System.Linq.IQueryable"/></returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all pending changes
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Neuroglia.Data.IRepository`1">
            <summary>
            Defines the fundamentals of a service used to manage data
            </summary>
            <typeparam name="TEntity">The type of data managed by the <see cref="T:Neuroglia.Data.IRepository`1"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Finds the entity with the specified key
            </summary>
            <param name="key">The key of the entity to find</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The entity with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Finds the entity with the specified key values
            </summary>
            <param name="keyValues">The key values of the entity to find</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The entity with the specified key values</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds the specified entity to the <see cref="T:Neuroglia.Data.IRepository`1"/>
            </summary>
            <param name="entity">The entity to add</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The newly added entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the specified entity
            </summary>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The updated entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes the specified entity from the <see cref="T:Neuroglia.Data.IRepository`1"/>
            </summary>
            <param name="entity">The entity to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The removed entity</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all entities contained in the <see cref="T:Neuroglia.Data.IRepository`1"/>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> containing all the entities contained in the <see cref="T:Neuroglia.Data.IRepository`1"/></returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`1.AsQueryable">
            <summary>
            Queries the <see cref="T:Neuroglia.Data.IRepository`1"/>
            </summary>
            <returns>A new <see cref="T:System.Linq.IQueryable"/></returns>
        </member>
        <member name="T:Neuroglia.Data.IRepository`2">
            <summary>
            Defines the fundamentals of a service used to manage data
            </summary>
            <typeparam name="TEntity">The type of data managed by the <see cref="T:Neuroglia.Data.IRepository`2"/></typeparam>
            <typeparam name="TKey">The type of key used to uniquely identify entities managed by the <see cref="T:Neuroglia.Data.IRepository`2"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.IRepository`2.FindAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Finds the entity with the specified key
            </summary>
            <param name="key">The key of the entity to find</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The entity with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`2.ContainsAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Determines whether or not the <see cref="T:Neuroglia.Data.IRepository`1"/> contains an entity with the specified key
            </summary>
            <param name="key">The key to check</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.Data.IRepository`1"/> contains an entity with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Data.IRepository`2.RemoveAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Removes the specified entity from the <see cref="T:Neuroglia.Data.IRepository`1"/>
            </summary>
            <param name="key">The key of the entity to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Neuroglia.Data.Properties.LocalizedResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_account_invalidcredentials">
            <summary>
              Looks up a localized string similar to Invalid username and/or password.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_concurrencyfailure">
            <summary>
              Looks up a localized string similar to Optimistic concurrency failure, object has been modified.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_defaulterror">
            <summary>
              Looks up a localized string similar to An unknown failure has occurred.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_duplicateemail">
            <summary>
              Looks up a localized string similar to Email &apos;{email}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_duplicaterolename">
            <summary>
              Looks up a localized string similar to Role name &apos;{role}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_duplicateusername">
            <summary>
              Looks up a localized string similar to User name &apos;{userName}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_invalidemail">
            <summary>
              Looks up a localized string similar to Email &apos;{email}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_invalidrolename">
            <summary>
              Looks up a localized string similar to Role name &apos;{role}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_invalidtoken">
            <summary>
              Looks up a localized string similar to Invalid token.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_invalidusername">
            <summary>
              Looks up a localized string similar to User name &apos;{username}&apos; is invalid, it can only contain letters or digits.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_loginalreadyassociated">
            <summary>
              Looks up a localized string similar to A user with this login already exists.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordmismatch">
            <summary>
              Looks up a localized string similar to Incorrect password.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordrequiresdigit">
            <summary>
              Looks up a localized string similar to Passwords must have at least one digit (&apos;0&apos;-&apos;9&apos;).
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordrequireslower">
            <summary>
              Looks up a localized string similar to Passwords must have at least one lowercase (&apos;a&apos;-&apos;z&apos;).
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordrequiresnonalphanumeric">
            <summary>
              Looks up a localized string similar to Passwords must have at least one non alphanumeric character.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordrequiresuniquechars">
            <summary>
              Looks up a localized string similar to Passwords must use at least {amount} different characters.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordrequiresupper">
            <summary>
              Looks up a localized string similar to Passwords must have at least one uppercase (&apos;A&apos;-&apos;Z&apos;).
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_passwordtooshort">
            <summary>
              Looks up a localized string similar to Passwords must be at least {length} characters.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_recoverycoderedemptionfailed">
            <summary>
              Looks up a localized string similar to Recovery code redemption failed.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_useralreadyhaspassword">
            <summary>
              Looks up a localized string similar to User already has a password set.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_useralreadyinrole">
            <summary>
              Looks up a localized string similar to User already in role &apos;{role}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_userlockoutnotenabled">
            <summary>
              Looks up a localized string similar to Lockout is not enabled for this user.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.error_identity_usernotinrole">
            <summary>
              Looks up a localized string similar to User is not in role &apos;{role}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_activetilloperatorsessionfound">
            <summary>
              Looks up a localized string similar to Failed to start a new operator session on the till with id &apos;{tillId}&apos;: an active operator session already exists.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_activetillsessionfound">
            <summary>
              Looks up a localized string similar to Failed to start a new session on the till with id &apos;{tillId}&apos;: an active session already exists.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentcannotbeadateinthefuture">
            <summary>
              Looks up a localized string similar to The {argument} cannot be a date in the future.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentcannotbeadateinthepast">
            <summary>
              Looks up a localized string similar to The {argument} cannot be a date in the past.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidaddress">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is an invalid address.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidcountrycode">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid two-letter ISO 3166 country code.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidemail">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid email address.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidiso4217code">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid ISO 4217 currency code.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidiso6391code">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid ISO 639-1 language code.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidphonenumber">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is an invalid phone number.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidphonenumberprefix">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid international phone number prefix.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvalidtimezoneid">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid time zone id.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisinvaliduri">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid uri.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentisunsupportedvalue">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not supported. Supported values: {values}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbecomprisedbetweenincluding">
            <summary>
              Looks up a localized string similar to The {argument} argument must be superior or equal to {min} and inferior or equal to {max}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbeearlierdatetimethan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a date and time equal to or earlier than &apos;{datetime}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbeearliertimethan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a time equal to or earlier than &apos;{time}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbehigherorequalto">
            <summary>
              Looks up a localized string similar to The {argument} argument must be superior or equal to {quantity}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbehigherorlowerthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be higher or lower than {value}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbehigherthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be higher than {min}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbelaterdatetimethan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a date and time equal to or later than &apos;{datetime}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbelatertimethan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a time equal to or later than &apos;{time}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbelowerorequalto">
            <summary>
              Looks up a localized string similar to The {argument} argument must be lower or equal to {quantity}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmustbenumeric">
            <summary>
              Looks up a localized string similar to The {argument} argument must contain digits only.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmusthavemaximumlengthof">
            <summary>
              Looks up a localized string similar to The {argument} argument must have a maximum length of {length}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentmusthaveminimumlengthof">
            <summary>
              Looks up a localized string similar to The {argument} argument must have a minimum length of {length}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentnull">
            <summary>
              Looks up a localized string similar to The {argument} argument cannot be null.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentnullorwhitespace">
            <summary>
              Looks up a localized string similar to The {argument} argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_argumentoutofrange">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is out of range.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_deletionnotsupported">
            <summary>
              Looks up a localized string similar to Deleting entities of type &apos;{type}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_entityalreadyexists">
            <summary>
              Looks up a localized string similar to A {entityType} with the specified {keyProperty} &apos;{key}&apos; already exists.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_entityalreadyexists_many">
            <summary>
              Looks up a localized string similar to A {entityType} with the specified {keyProperties} already exists.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_filteringnotallowed">
            <summary>
              Looks up a localized string similar to Filtering is not allowed for the specified type &apos;{type}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_invalidcast">
            <summary>
              Looks up a localized string similar to Failed to cast the type &apos;{from}&apos; to the type &apos;{to}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_missingproperty">
            <summary>
              Looks up a localized string similar to Failed to find the property &apos;{property}&apos; in the specified type &apos;{type}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_notsupported">
            <summary>
              Looks up a localized string similar to The supplied {type} value &apos;{value}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_nullreference">
            <summary>
              Looks up a localized string similar to Failed to find a &apos;{type}&apos; with the specified {keyProperty} &apos;{key}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_nullreference_many">
            <summary>
              Looks up a localized string similar to Failed to find a &apos;{type}&apos; with the specified keys: {keys}.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_unexpectedstate">
            <summary>
              Looks up a localized string similar to The {entityType} with {keyProperty} &apos;{key}&apos; is in an unexpected state &apos;{state}&apos;.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Properties.LocalizedResources.exception_domain_unexpectedvalue">
            <summary>
              Looks up a localized string similar to The entity of type &apos;{type}&apos; with {keyProperty} &apos;{id}&apos; has an unexpected &apos;{property}&apos; value &apos;{value}&apos;.
            </summary>
        </member>
        <member name="T:Neuroglia.Data.RepositoryBase`2">
            <summary>
            Represents an abstract implementation of the <see cref="T:Neuroglia.Data.IRepository`2"/> interface
            </summary>
            <typeparam name="TEntity">The type of data managed by the <see cref="T:Neuroglia.Data.IRepository`2"/></typeparam>
            <typeparam name="TKey">The type of key used to uniquely identify entities managed by the <see cref="T:Neuroglia.Data.IRepository`2"/></typeparam>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.FindAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.ContainsAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.Neuroglia#Data#IRepository#ContainsAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.RemoveAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.AsQueryable">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.ToListAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.RepositoryBase`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.IPluralizer">
            <summary>
            Defines the fundamentals of a service used to pluralize words
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IPluralizer.Pluralize(System.String)">
            <summary>
            Pluralizes the specified word
            </summary>
            <param name="word">The word to pluralize</param>
            <returns>The pluralized word</returns>
        </member>
        <member name="M:Neuroglia.Data.IPluralizer.Singularize(System.String)">
            <summary>
            Singularizes the specified word
            </summary>
            <param name="word">The word to singularize</param>
            <returns>The singularized word</returns>
        </member>
        <member name="T:Neuroglia.Data.Pluralizer">
            <summary>
            Represents an implementation of the <see cref="T:Neuroglia.Data.IPluralizer"/> interface based on a <see cref="T:Pluralize.NET.Core.Pluralizer"/> service
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Pluralizer.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Pluralizer"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Pluralizer.PluralizationService">
            <summary>
            Gets the underlying <see cref="T:Pluralize.NET.Core.Pluralizer"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Pluralizer.Pluralize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Pluralizer.Singularize(System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
