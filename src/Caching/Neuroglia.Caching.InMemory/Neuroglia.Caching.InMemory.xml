<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Caching.InMemory</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Caching.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.IServiceCollectionExtensions.AddMemoryDistributedCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds and registers an <see cref="T:Neuroglia.Caching.IDistributedCache"/> of type <see cref="T:Neuroglia.Caching.MemoryDistributedCache"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Caching.MemoryDistributedCache">
            <summary>
            Represents the in-memory implementation of the <see cref="T:Neuroglia.Caching.IDistributedCache"/> interface
            </summary>
        </member>
        <member name="F:Neuroglia.Caching.MemoryDistributedCache.EntriesCollectionProperty">
            <summary>
            Gets the 'EntriesCollection' property of the <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache"/> type
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Caching.MemoryDistributedCache"/>
            </summary>
            <param name="cache">The underlying <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/></param>
        </member>
        <member name="P:Neuroglia.Caching.MemoryDistributedCache.Cache">
            <summary>
            Gets the underlying <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.MemoryDistributedCache.EntriesCollection">
            <summary>
            Gets the <see cref="T:System.Collections.IDictionary"/> containing the entries of the underlying <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> 
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.MemoryDistributedCache.Entries">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerable"/> containing the <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry"/> instances of the underlying <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.MemoryDistributedCache.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerable"/> containing the keys of the underlying <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ContainsKey(System.String)">
            <summary>
            Gets a boolean indicating whether or not the cache contains the specified key
            </summary>
            <param name="key">The key to check</param>
            <returns>A boolean indicating whether or not the cache contains the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ContainsKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a boolean indicating whether or not the cache contains the specified key
            </summary>
            <param name="key">The key to check</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the cache contains the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ContainsListElement(System.String,System.String)">
            <summary>
            Determines whether the specified list contains an element with the specified key
            </summary>
            <param name="key">The key of the list to check</param>
            <param name="elemKey">The key of the element to check for existence</param>
            <returns>A boolean indicating whether or not the specified list contains an element with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ContainsListElementAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified list contains an element with the specified key
            </summary>
            <param name="key">The key of the list to check</param>
            <param name="elemKey">The key of the element to check for existence</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the specified list contains an element with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.FindKeys(System.String)">
            <summary>
            Finds all keys that match the specified pattern
            </summary>
            <param name="pattern">The pattern to match</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the keys that match the specified pattern</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.FindKeysAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all keys that match the specified pattern
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the keys that match the specified pattern</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetListKeys(System.String)">
            <summary>
            Retrieves all the element keys of the list with the specified key
            </summary>
            <param name="key">The key of the list for which to retrieve all the element keys</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the element keys of the list with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetListKeysAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the element keys of the list with the specified key
            </summary>
            <param name="key">The key of the list for which to retrieve all the element keys</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the element keys of the list with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Lock(System.String,System.String,System.TimeSpan)">
            <summary>
            Locks access to the specified key
            </summary>
            <param name="key">The key to lock</param>
            <param name="token">The lock's token</param>
            <param name="expiresIn">The time in which the lock expires</param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ReleaseLock(System.String,System.String)">
            <summary>
            Releases the lock on the specified key
            </summary>
            <param name="key">The key to release the lock of</param>
            <param name="token">The token of the lock to release</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Get``1(System.String)">
            <summary>
            Gets the value cached with the specified key
            </summary>
            <typeparam name="T">The type of the cached value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <returns>The value cached with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the value cached with the specified key
            </summary>
            <typeparam name="T">The type of the cached value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The value cached with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetEntry``1(System.String)">
            <summary>
            Gets the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key
            </summary>
            <typeparam name="T">The type of data cached by the entry</typeparam>
            <param name="key">The key of the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> to retrieve</param>
            <returns>The <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetEntryAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key
            </summary>
            <typeparam name="T">The type of data cached by the entry</typeparam>
            <param name="key">The key of the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,Neuroglia.Caching.CacheEntryOptions)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="options">The options configuring how to cache the value</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,Neuroglia.Caching.CacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="options">The options configuring how to cache the value</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.Byte[],Neuroglia.Caching.CacheEntryOptions)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="options">The options configuring how to cache the value</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.Byte[],Neuroglia.Caching.CacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="options">The options configuring how to cache the value</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.DateTimeOffset)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.DateTimeOffset,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.DateTimeOffset,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Set``1(System.String,``0,System.TimeSpan,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.SetAsync``1(System.String,``0,System.TimeSpan,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Remove(System.String)">
            <summary>
            Removes the specified key
            </summary>
            <param name="key">The key to remove</param>
            <returns>A boolean indicating whether or not the key could be removed</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified key
            </summary>
            <param name="key">The key to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the key could be removed</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetList``1(System.String)">
            <summary>
            Gets the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve</param>
            <returns>The list store at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The list store at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetListElement``1(System.String,System.String)">
            <summary>
            Gets the specified element from the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve an element from</param>
            <param name="elemKey">The key of the element to retrieve</param>
            <returns>The element with the specified key, from the list stored at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.GetListElementAsync``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified element from the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve an element from</param>
            <param name="elemKey">The key of the element to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The element with the specified key, from the list stored at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToList``1(System.String,System.String,``0)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToList``1(System.String,System.String,``0,System.DateTime)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresAt">The UTC date and time at which the cached list should expire at</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresAt">The UTC date and time at which the cached list should expire at</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToList``1(System.String,System.String,``0,System.TimeSpan)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresIn">A <see cref="T:System.TimeSpan"/> that represents the time in which the list should expire</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresIn">A <see cref="T:System.TimeSpan"/> that represents the time in which the list should expire</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.UpdateList``1(System.String,System.String,``0)">
            <summary>
            Updates an element of the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to update an element of</param>
            <param name="elemKey">The key of the element to update</param>
            <param name="elem">The updated element</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.UpdateListAsync``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Updates an element of the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to update an element of</param>
            <param name="elemKey">The key of the element to update</param>
            <param name="elem">The updated element</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.RemoveFromList(System.String,System.String)">
            <summary>
            Removes an element from the list stored at the specified key
            </summary>
            <param name="key">The key of the list to remove an element from</param>
            <param name="elemKey">The key of the element to remove</param>
            <returns>A boolean indicating whether or not the element could be removed from the list</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.RemoveFromListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes an element from the list stored at the specified key
            </summary>
            <param name="key">The key of the list to remove an element from</param>
            <param name="elemKey">The key of the element to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the element could be removed from the list</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to retrieve the value with the specified key
            </summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="value">The resulting value, of any</param>
            <returns>A boolean indicating whether or not the value with the specified key exists and could be retrieved</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.TryGetListElement``1(System.String,System.String,``0@)">
            <summary>
            Attempts to retrieve a list value with the specified key
            </summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="key">The key of the list to retrieve the value from</param>
            <param name="elemKey">The key of the list element to retrieve</param>
            <param name="value">The resulting value, of any</param>
            <returns>A boolean indicating whether or not the value with the specified key exists and could be retrieved</returns>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Caching.MemoryDistributedCache.ClearAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
