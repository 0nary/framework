<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Data.Kubernetes</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Data.ICustomResourceRepository`1">
            <summary>
            Defines the fundamentals of an <see cref="T:Neuroglia.Data.IRepository`2"/> used to manage <see cref="T:Neuroglia.K8s.ICustomResource"/>s
            </summary>
            <typeparam name="TResource">The type of <see cref="T:Neuroglia.K8s.ICustomResource"/> to manage</typeparam>
        </member>
        <member name="M:Neuroglia.Data.ICustomResourceRepository`1.FilterAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Filters cluster <see cref="T:Neuroglia.K8s.ICustomResource"/>s
            </summary>
            <param name="labelSelector">The <see cref="T:Neuroglia.K8s.ICustomResource"/>'s label selector</param>
            <param name="fieldSelector">The <see cref="T:Neuroglia.K8s.ICustomResource"/>'s field selector</param>
            <param name="namespace">The <see cref="T:Neuroglia.K8s.ICustomResource"/>'s namespace</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all filtered <see cref="T:Neuroglia.K8s.ICustomResource"/>s</returns>
        </member>
        <member name="T:Neuroglia.Data.IStatusPatchable">
            <summary>
            Defines the fundamentals of an object that allows its status to be patched
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IStatusPatchable.TryGetStatusPatch(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument@)">
            <summary>
            Attempts to get the current status <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/>
            </summary>
            <param name="patch">The current status <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/>, if any</param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.Data.IPatchable"/> has a pending status patch</returns>
        </member>
        <member name="T:Neuroglia.Data.K8sRepository`1">
            <summary>
            Represents an <see cref="T:Neuroglia.Data.IRepository`2"/> implementation used to manage <see cref="T:Neuroglia.K8s.ICustomResource"/>s
            </summary>
            <typeparam name="TResource">The type of <see cref="T:Neuroglia.K8s.ICustomResource"/> to manage</typeparam>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,k8s.IKubernetes)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.K8sRepository`1"/>
            </summary>
            <param name="loggerFactory">The service used to create <see cref="T:Microsoft.Extensions.Logging.ILogger"/>s</param>
            <param name="kubernetes">The service used to interact with the Kubernetes API</param>
        </member>
        <member name="P:Neuroglia.Data.K8sRepository`1.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.K8sRepository`1.Kubernetes">
            <summary>
            Gets the service used to interact with the Kubernetes API
            </summary>
        </member>
        <member name="P:Neuroglia.Data.K8sRepository`1.ResourceDefinition">
            <summary>
            Gets the definition of the <see cref="T:Neuroglia.K8s.ICustomResource"/>s to manage
            </summary>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.ContainsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.FilterAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.FindAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.FindAsync(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.PatchAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.PatchStatusAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.PutAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.ToListAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.AsQueryable">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.K8sRepository`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
