<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Data.EventSourcing.EventStore</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.Name">
            <summary>
            Gets/sets the name of the <see cref="T:EventStore.Client.EventStoreClient"/> to create
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.ConnectionString">
            <summary>
            Gets/sets the connection string of the <see cref="T:EventStore.Client.EventStoreClient"/> to create
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.WithName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.UseConnectionString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreClientBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions">
            <summary>
            Represents the options used to configure an <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.MaxSliceLength">
            <summary>
            Gets/sets the maximum length for an <see cref="T:Neuroglia.Data.EventSourcing.ISourcedEvent"/> slice. Defaults to 100.
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.SerializerType">
            <summary>
            Gets/sets the type of <see cref="T:Neuroglia.Serialization.ISerializer"/> to use to serialize and deserialize events
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.AggregatorFactoryType">
            <summary>
            Gets/sets the type of <see cref="T:Neuroglia.Data.EventSourcing.IAggregatorFactory"/> to use to create <see cref="T:Neuroglia.Data.EventSourcing.IAggregator"/>s
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.ClientSetupAction">
            <summary>
            Gets/sets an <see cref="T:System.Action`1"/> used to configure the <see cref="T:EventStore.Client.EventStoreClient"/> to use
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions.DefaultCredentials">
            <summary>
            Gets/sets the default <see cref="T:EventStore.Client.UserCredentials"/> to use to connect to the remote EventStore server
            </summary>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.#ctor(Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder"/>
            </summary>
            <param name="options">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/> to configure</param>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.Options">
            <summary>
            Gets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/> to configure
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.UseAggregatorFactory``1">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.UseSerializer``1">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.ConfigureClient(System.Action{Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.UseDefaultCredentials(EventStore.Client.UserCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptionsBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder">
            <summary>
            Defines the fundamentals of a service used to build an <see cref="T:EventStore.Client.EventStoreClient"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder.WithName(System.String)">
            <summary>
            Sets the <see cref="T:EventStore.Client.EventStoreClient"/>'s name
            </summary>
            <param name="name">The name of the <see cref="T:EventStore.Client.EventStoreClient"/> to create</param>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder.UseConnectionString(System.String)">
            <summary>
            Uses the specified connection string to connect to the remote server
            </summary>
            <param name="connectionString">The connection string to connect to the remote server</param>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder.Build">
            <summary>
            Builds the <see cref="T:EventStore.Client.EventStoreClient"/>
            </summary>
            <returns>A new <see cref="T:EventStore.Client.EventStoreClient"/></returns>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder">
            <summary>
            Defines the fundamentals of a service used to build <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder.UseSerializer``1">
            <summary>
            Uses the specified <see cref="T:Neuroglia.Serialization.ISerializer"/> to serialize and deserialize events
            </summary>
            <typeparam name="TSerializer">The type of <see cref="T:Neuroglia.Serialization.ISerializer"/> to use to serialize and deserialize events</typeparam>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder.UseAggregatorFactory``1">
            <summary>
            Uses the specified <see cref="T:Neuroglia.Data.EventSourcing.IAggregatorFactory"/> to create <see cref="T:Neuroglia.Data.EventSourcing.IAggregator"/>s
            </summary>
            <typeparam name="TFactory">The type of <see cref="T:Neuroglia.Data.EventSourcing.IAggregatorFactory"/> to use to create <see cref="T:Neuroglia.Data.EventSourcing.IAggregator"/>s</typeparam>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder.ConfigureClient(System.Action{Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder})">
            <summary>
            Configures the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreClientBuilder"/> to use
            </summary>
            <param name="setupAction">An <see cref="T:System.Action`1"/> used to setup the <see cref="T:EventStore.Client.EventStoreClient"/> to use</param>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder.UseDefaultCredentials(EventStore.Client.UserCredentials)">
            <summary>
            Uses the specified <see cref="T:EventStore.Client.UserCredentials"/> when contacting the remote server
            </summary>
            <param name="credentials">The default <see cref="T:EventStore.Client.UserCredentials"/> to use</param>
            <returns>The configured <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder.Build">
            <summary>
            Builds the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/>
            </summary>
            <returns>A new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions"/></returns>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptions"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.DurableName">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.IsDurable">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.ResolveLinks">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.StreamPosition">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.StartFrom">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.MinEventsBeforeCheckpoint">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.MaxEventsBeforeCheckpoint">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.MaxSubscribers">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions.AckMode">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptionsBuilder"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.#ctor(Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder"/>
            </summary>
            <param name="options">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions"/> to configure</param>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.Options">
            <summary>
            Gets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptions"/> to configure
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.AsDurable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.StartFrom(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.StartFromBegining">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.StartFromCurrent">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.ResolveLinks(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.WithMaxSubscribers(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.WithMinEventsBeforeCheckpoint(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.WithMaxEventsBeforeCheckpoint(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.WithAckMode(Neuroglia.Data.EventSourcing.EventAckMode)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Configuration.SubscriptionOptionsBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/> interface
            </summary>
        </member>
        <member name="E:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.Disposed">
            <summary>
            Represents the event fired whenever the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> has been disposed of
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
            <param name="id">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>'s id</param>
            <param name="source">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>'s source</param>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.Id">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.Source">
            <summary>
            Gets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>'s source
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.SetSource(System.Object)">
            <summary>
            Sets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>'s source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.CreateFor(System.String,EventStore.Client.PersistentSubscription)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
            <param name="subscriptionId">The id of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> to create</param>
            <param name="source">The <see cref="T:EventStore.Client.PersistentSubscription"/> to create a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> for</param>
            <returns>A new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.CreateFor(System.String,EventStore.Client.StreamSubscription)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
            <param name="subscriptionId">The id of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> to create</param>
            <param name="source">The <see cref="T:EventStore.Client.StreamSubscription"/> to create a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> for</param>
            <returns>A new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.Dispose(System.Boolean)">
            <summary>
            Disposes of the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
            <param name="disposing">A boolean indicating whether or not the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/> is being disposed of</param>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription">
            <summary>
            Defines the fundamentals of an <see href="https://eventstore.com/">Event Store</see> subscription
            </summary>
        </member>
        <member name="E:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription.Disposed">
            <summary>
            Represents the event fired whenever the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/> has been disposed of
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription.Id">
            <summary>
            Gets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/>'s id
            </summary>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription">
            <summary>
            Represents a durable <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription.#ctor(System.String,EventStore.Client.PersistentSubscription)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription"/>
            </summary>
            <param name="id">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription"/>'s id</param>
            <param name="source">The underlying <see cref="T:EventStore.Client.PersistentSubscription"/></param>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription.StreamId">
            <summary>
            Gets the id of the stream to subscribe to
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription.DurableName">
            <summary>
            Gets the <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription"/>'s name
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription.Source">
            <summary>
            Gets the underlying <see cref="T:EventStore.Client.PersistentSubscription"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.DurableSubscription.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription">
            <summary>
            Represents a standard <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription"/>
            </summary>
            <param name="id">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription"/>'s id</param>
            <param name="source">The underlying <see cref="T:EventStore.Client.StreamSubscription"/></param>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription.Source">
            <summary>
            Gets the underlying <see cref="T:EventStore.Client.StreamSubscription"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.EventStore.Subscriptions.StandardSubscription.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.IServiceCollectionExtensions.AddEventStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Neuroglia.Data.EventSourcing.EventStore.Configuration.IEventStoreOptionsBuilder})">
            <summary>
            Adds and configures the <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <param name="setupAction">An <see cref="T:System.Action`1"/> used to configure the <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/> to add</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.IServiceCollectionExtensions.AddEventStore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds and configures the <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.ISubscriptionOptionsExtensions">
            <summary>
            Defines extensions for <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptions"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ISubscriptionOptionsExtensions.ToPersistentSubscriptionSettings(Neuroglia.Data.EventSourcing.ISubscriptionOptions)">
            <summary>
            Transforms the <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptions"/> into a new <see cref="T:EventStore.Client.PersistentSubscriptionSettings"/>
            </summary>
            <param name="subscriptionOptions">The <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptions"/> to transform</param>
            <returns>A new <see cref="T:EventStore.Client.PersistentSubscriptionSettings"/></returns>
        </member>
        <member name="T:Neuroglia.Data.EventSourcing.ESEventStore">
            <summary>
            Represents the default <see href="https://www.eventstore.com/">Event Store</see> implementation of the <see cref="T:Neuroglia.Data.EventSourcing.IEventStore"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.Data.EventSourcing.ESEventStore},System.IServiceProvider,Neuroglia.Serialization.ISerializerProvider,Microsoft.Extensions.Options.IOptions{Neuroglia.Data.EventSourcing.EventStore.Configuration.EventStoreOptions},EventStore.Client.EventStoreClient)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="serviceProvider">The current <see cref="T:System.IServiceProvider"/></param>
            <param name="serializerProvider">The service used to provide <see cref="T:Neuroglia.Serialization.ISerializer"/>s</param>
            <param name="options">The options used to configure the <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/></param>
            <param name="eventStoreClient">The service used to interact with the remove <see href="https://www.eventstore.com/">Event Store</see> service</param>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.ServiceProvider">
            <summary>
            Gets the current <see cref="T:System.IServiceProvider"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.Options">
            <summary>
            Gets the options used to configure the <see cref="T:Neuroglia.Data.EventSourcing.ESEventStore"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.EventStoreClient">
            <summary>
            Gets the service used to interact with the remove <see href="https://www.eventstore.com/">Event Store</see> service
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.EventStorePersistentSubscriptionsClient">
            <summary>
            Gets the service used to interact with the remove <see href="https://www.eventstore.com/">Event Store</see> service, exclusively for persistent subscriptions
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.Serializer">
            <summary>
            Gets the service used to serialize and deserialize <see cref="T:Neuroglia.Data.EventSourcing.ISourcedEvent"/>s
            </summary>
        </member>
        <member name="P:Neuroglia.Data.EventSourcing.ESEventStore.Subscriptions">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all active <see cref="T:Neuroglia.Data.EventSourcing.EventStore.EventStoreSubscription"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.GetStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.AppendToStreamAsync(System.String,System.Collections.Generic.IEnumerable{Neuroglia.Data.EventSourcing.IEventMetadata},System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.AppendToStreamAsync(System.String,System.Collections.Generic.IEnumerable{Neuroglia.Data.EventSourcing.IEventMetadata},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadEventsForwardAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadEventsForwardAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadAllEventsForwardAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadSingleEventForwardAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadResolvedEventsForwardAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Reads the <see cref="T:EventStore.Client.ResolvedEvent"/>s of the specified <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> in a forward fashion
            </summary>
            <param name="streamId">The id of the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> to get the <see cref="T:EventStore.Client.ResolvedEvent"/>s of</param>
            <param name="offset">The number of the <see cref="T:EventStore.Client.ResolvedEvent"/> to offset reading the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> from</param>
            <param name="length">The number of the <see cref="T:EventStore.Client.ResolvedEvent"/> to read the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> to</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:EventStore.Client.ResolvedEvent"/>s the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> is made out of</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadEventsBackwardAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadEventsBackwardAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadSingleEventBackwardAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadAllEventsBackwardAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadResolvedEventsBackwardAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Reads the <see cref="T:EventStore.Client.ResolvedEvent"/>s of the specified <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> in a backward fashion
            </summary>
            <param name="streamId">The id of the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> to get the <see cref="T:EventStore.Client.ResolvedEvent"/>s of</param>
            <param name="offset">The number of the <see cref="T:EventStore.Client.ResolvedEvent"/> to offset reading the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> from</param>
            <param name="length">The amount of <see cref="T:EventStore.Client.ResolvedEvent"/>s to read from the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:EventStore.Client.ResolvedEvent"/>s the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> is made out of</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.ReadResolvedEventsAsync(EventStore.Client.Direction,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Reads <see cref="T:EventStore.Client.ResolvedEvent"/>s from the specified stream, in the specified direction
            </summary>
            <param name="direction">The direction to read the stream from</param>
            <param name="streamId">The id of the stream to read</param>
            <param name="offset">The position from which to offset reading the stream</param>
            <param name="length">The amount of <see cref="T:EventStore.Client.ResolvedEvent"/>s to read from the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:EventStore.Client.ResolvedEvent"/>s the <see cref="T:Neuroglia.Data.EventSourcing.IEventStream"/> is made out of</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.SubscribeToStreamAsync(System.String,System.Action{Neuroglia.Data.EventSourcing.ISubscriptionOptionsBuilder},System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.SubscribeToStreamAsync(System.String,System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.UnsubscribeFrom(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.TruncateStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.TruncateStreamAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.DeleteStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.GenerateEventsDataAsync(System.Collections.Generic.IEnumerable{Neuroglia.Data.EventSourcing.IEventMetadata},System.Threading.CancellationToken)">
            <summary>
            Generates <see cref="T:EventStore.Client.EventData"/> for the specified <see cref="T:Neuroglia.Data.EventSourcing.IEventMetadata"/>s
            </summary>
            <param name="events">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Neuroglia.Data.EventSourcing.IEventMetadata"/>s to process</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the processed <see cref="T:EventStore.Client.EventData"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.UnwrapsStoredEventAsync(EventStore.Client.ResolvedEvent,System.Threading.CancellationToken)">
            <summary>
            Unwraps an <see cref="T:Neuroglia.Data.EventSourcing.ISourcedEvent"/> from its <see cref="T:EventStore.Client.ResolvedEvent"/> envelope
            </summary>
            <param name="resolvedEvent">The <see cref="T:EventStore.Client.ResolvedEvent"/> to resolve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The unwrapped <see cref="T:Neuroglia.Data.EventSourcing.ISourcedEvent"/></returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.AddOrUpdateSubscription(System.String,System.Object)">
            <summary>
            Adds or updates a new <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/>
            </summary>
            <param name="subscriptionId">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/>'s id</param>
            <param name="subscriptionSource">The <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/>'s source</param>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreatePersistentSubscriptionHandler(System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task})">
            <summary>
            Creates a new persistent subscription handler
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <returns>A new <see cref="T:System.Func`3"/> used to handle the persistent subscription</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreatePersistentSubscriptionDropHandler(System.String,System.String,System.String,System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task},Neuroglia.Data.EventSourcing.EventAckMode)">
            <summary>
            Creates a new <see cref="T:System.Action`3"/> used to handle subscription drops
            </summary>
            <param name="subscriptionId">The id of the subscription that has been dropped</param>
            <param name="streamId">The id of the subscribed stream</param>
            <param name="subscriptionName">The persistent subscription's name</param>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <param name="eventAckMode">The way subscribed events should be acknowledged</param>
            <returns>A new <see cref="T:System.Action`3"/> used to handle subscription drops</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreateCatchUpSubscriptionHandler(System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task})">
            <summary>
            Creates a new catch-up subscription handler
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <returns>A new <see cref="T:System.Func`3"/> used to handle the catch-up subscription</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreateCatchUpSubscriptionDropHandler(System.String,System.String,System.Nullable{System.Int64},Neuroglia.Data.EventSourcing.ISubscriptionOptions,System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task})">
            <summary>
            Creates a new <see cref="T:System.Action`3"/> used to handle subscription drops
            </summary>
            <param name="subscriptionId">The id of the subscription that has been dropped</param>
            <param name="streamId">The id of the catch-up stream</param>
            <param name="offsetFrom">The event number from which to offset</param>
            <param name="options">The <see cref="T:Neuroglia.Data.EventSourcing.ISubscriptionOptions"/> to use</param>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <returns>A new <see cref="T:System.Action`3"/> used to handle subscription drops</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreateStandardSubscriptionHandler(System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task})">
            <summary>
            Creates a new standard subscription handler
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <returns>A new <see cref="T:System.Func`3"/> used to handle the standard subscription</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.CreateStandardSubscriptionDropHandler(System.String,System.String,System.Boolean,System.Func{System.IServiceProvider,Neuroglia.Data.EventSourcing.ISourcedEvent,System.Threading.Tasks.Task})">
            <summary>
            Creates a new <see cref="T:System.Action`3"/> used to handle subscription drops
            </summary>
            <param name="subscriptionId">The id of the subscription that has been dropped</param>
            <param name="streamId">The id of the catch-up stream</param>
            <param name="resolveLinks">A boolean indicating whether or not to resolve event links</param>
            <param name="handler">A <see cref="T:System.Func`3"/> used to handle the subscription</param>
            <returns>A new <see cref="T:System.Action`3"/> used to handle subscription drops</returns>
        </member>
        <member name="M:Neuroglia.Data.EventSourcing.ESEventStore.OnSubscriptionDisposed(System.Object,System.EventArgs)">
            <summary>
            Represents the handler fired whenever an <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/> has been disposed
            </summary>
            <param name="slengther">The disposed <see cref="T:Neuroglia.Data.EventSourcing.EventStore.IEventStoreSubscription"/></param>
            <param name="e">The event's arguments</param>
        </member>
    </members>
</doc>
