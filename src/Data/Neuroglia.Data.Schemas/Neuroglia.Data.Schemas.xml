<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Data.Schemas</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Data.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.IServiceCollectionExtensions.AddSchemaRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers and configures a new default implementation of the <see cref="T:Neuroglia.Data.Services.ISchemaRegistry"/> interface
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configures <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataResponseMessage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/>
            </summary>
            <param name="stream">The underlying <see cref="P:Neuroglia.Data.Services.ODataResponseMessage.Stream"/></param>
        </member>
        <member name="P:Neuroglia.Data.Services.ODataResponseMessage.Stream">
            <summary>
            Gets the underlying <see cref="P:Neuroglia.Data.Services.ODataResponseMessage.Stream"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataResponseMessage.Dispose(System.Boolean)">
            <summary>
            Disposes of the <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/>
            </summary>
            <param name="disposing">A boolean indicating whether or not the <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/> is being disposed of</param>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataResponseMessage.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataResponseMessage.ReadFrom(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads a new <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/> from the specified <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/> from</param>
            <param name="headers">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the ODATA headers, if any</param>
            <returns>A new <see cref="T:Neuroglia.Data.Services.ODataResponseMessage"/></returns>
        </member>
        <member name="T:Neuroglia.Data.Services.ISchemaReader">
            <summary>
            Defines the fundamentals of a service used to read schema documents
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.ISchemaReader.SchemaType">
            <summary>
            Gets the type of schema document the <see cref="T:Neuroglia.Data.Services.ISchemaReader"/> handles
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ISchemaReader.ReadFromAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Reads the schema document at the specified <see cref="T:System.Uri"/>
            </summary>
            <param name="documentUri">The <see cref="T:System.Uri"/> of the schema document to read</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The schema document</returns>
        </member>
        <member name="T:Neuroglia.Data.Services.ODataSchemaReader">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.Services.ISchemaReader"/> interface used to read ODATA schemas
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataSchemaReader.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.Data.Services.OpenApiSchemaReader},System.Net.Http.HttpClient)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Services.ODataSchemaReader"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="httpClient">The service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s</param>
        </member>
        <member name="P:Neuroglia.Data.Services.ODataSchemaReader.SchemaType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Services.ODataSchemaReader.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.ODataSchemaReader.HttpClient">
            <summary>
            Gets the service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataSchemaReader.ReadFromAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.ODataSchemaReader.Create">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.Services.ODataSchemaReader"/>
            </summary>
            <returns>A new <see cref="T:Neuroglia.Data.Services.ODataSchemaReader"/></returns>
        </member>
        <member name="T:Neuroglia.Data.Services.OpenApiSchemaReader">
            <summary>
            Represents the default OpenAPI implementation of the <see cref="T:Neuroglia.Data.Services.ISchemaReader"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.OpenApiSchemaReader.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.Data.Services.OpenApiSchemaReader},System.Net.Http.HttpClient)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Services.OpenApiSchemaReader"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="httpClient">The service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s</param>
        </member>
        <member name="P:Neuroglia.Data.Services.OpenApiSchemaReader.SchemaType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Services.OpenApiSchemaReader.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.OpenApiSchemaReader.HttpClient">
            <summary>
            Gets the service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.OpenApiSchemaReader.ReadFromAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.OpenApiSchemaReader.Create">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.Services.OpenApiSchemaReader"/>
            </summary>
            <returns>A new <see cref="T:Neuroglia.Data.Services.OpenApiSchemaReader"/></returns>
        </member>
        <member name="T:Neuroglia.Data.Services.ProtoSchemaReader">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.Services.ISchemaReader"/> interface used to read PROTO schemas
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ProtoSchemaReader.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.Data.Services.OpenApiSchemaReader},System.Net.Http.HttpClient)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Services.ProtoSchemaReader"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="httpClient">The service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s</param>
        </member>
        <member name="P:Neuroglia.Data.Services.ProtoSchemaReader.SchemaType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.Services.ProtoSchemaReader.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.ProtoSchemaReader.HttpClient">
            <summary>
            Gets the service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.ProtoSchemaReader.ReadFromAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.ProtoSchemaReader.Create">
            <summary>
            Creates a new <see cref="T:Neuroglia.Data.Services.ProtoSchemaReader"/>
            </summary>
            <returns>A new <see cref="T:Neuroglia.Data.Services.ProtoSchemaReader"/></returns>
        </member>
        <member name="T:Neuroglia.Data.Services.SchemaRegistry">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.Services.ISchemaRegistry"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.SchemaRegistry.#ctor(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IEnumerable{Neuroglia.Data.Services.ISchemaReader},System.Net.Http.HttpClient)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.Services.SchemaRegistry"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="documentReaders">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Data.Services.ISchemaReader"/>s</param>
            <param name="httpClient">The service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s</param>
        </member>
        <member name="P:Neuroglia.Data.Services.SchemaRegistry.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.SchemaRegistry.HttpClient">
            <summary>
            Gets the service used to perform <see cref="T:System.Net.Http.HttpRequestMessage"/>s
            </summary>
        </member>
        <member name="P:Neuroglia.Data.Services.SchemaRegistry.DocumentReaders">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the type mappings of all registered <see cref="T:Neuroglia.Data.Services.ISchemaReader"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Data.Services.SchemaRegistry.GetSchemaAsync(Neuroglia.Data.SchemaType,System.Uri,Neuroglia.Data.SchemaDocumentPullPolicy,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.SchemaRegistry.GetSchemaByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Data.Services.SchemaRegistry.GetSchemaByDocumentUriAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.SchemaDescriptor">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.ISchemaDescriptor"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Data.SchemaDescriptor.#ctor(Neuroglia.Data.SchemaType,System.String,System.String,System.Uri,System.Object)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Data.SchemaDescriptor"/>
            </summary>
            <param name="type">The type of the described schema</param>
            <param name="id">The id of the described schema</param>
            <param name="version">The version of the described schema</param>
            <param name="documentUri">The <see cref="T:System.Uri"/> of the described schema's document</param>
            <param name="document">The described schema's document</param>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor.Type">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor.Id">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor.Version">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor.DocumentUri">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor.Document">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Data.SchemaDescriptor`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Data.ISchemaDescriptor"/> interface
            </summary>
            <typeparam name="TSchema">The type of the schema to describe</typeparam>
        </member>
        <member name="M:Neuroglia.Data.SchemaDescriptor`1.#ctor(Neuroglia.Data.SchemaType,System.String,System.String,System.Uri,`0)">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Data.SchemaDescriptor`1.Neuroglia#Data#ISchemaDescriptor{TSchema}#Document">
            <inheritdoc/>
        </member>
    </members>
</doc>
