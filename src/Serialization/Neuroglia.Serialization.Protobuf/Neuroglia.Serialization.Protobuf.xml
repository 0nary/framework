<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Serialization.Protobuf</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Serialization.FieldDescriptorProtoExtensions">
            <summary>
            Defines extensions for the protobuf-net library
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.FieldDescriptorProtoExtensions.ToRuntimeType(Google.Protobuf.Reflection.FieldDescriptorProto.Type)">
            <summary>
            Gets the <see cref="T:Google.Protobuf.Reflection.FieldDescriptorProto.Type"/>'s runtime <see cref="T:System.Type"/>
            </summary>
            <param name="type">The <see cref="T:Google.Protobuf.Reflection.FieldDescriptorProto.Type"/> to get the runtime type for</param>
            <returns>The <see cref="T:Google.Protobuf.Reflection.FieldDescriptorProto.Type"/>'s runtime <see cref="T:System.Type"/></returns>
        </member>
        <member name="T:Neuroglia.Serialization.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.IServiceCollectionExtensions.AddProtobufSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds and configures a <see cref="T:Neuroglia.Serialization.ProtobufSerializer"/> service
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Serialization.IProtobufSerializer">
            <summary>
            Defines the fundamentals of a service used to serialize and deserialize Protobuf
            </summary>
        </member>
        <member name="T:Neuroglia.Serialization.ProtobufHelper">
            <summary>
            Defines helper methods for Protobuf
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufHelper.Serialize(System.Object)">
            <summary>
            Serializes the specified value
            </summary>
            <param name="value">The value to serialize</param>
            <returns>A new byte array that represents the serialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufHelper.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserializes the specified input
            </summary>
            <param name="input">The ProtoBuf bytes to deserialize</param>
            <param name="type">The type to deserialize to</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="T:Neuroglia.Serialization.ProtobufSerializer">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Serialization.IProtobufSerializer"/> interface
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.ProtobufSerializer.SupportedMimeTypes">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.ProtobufSerializer.DefaultMimeType">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufSerializer.Serialize(System.Object,System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.ProtobufSerializer.SerializeAsync(System.Object,System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
