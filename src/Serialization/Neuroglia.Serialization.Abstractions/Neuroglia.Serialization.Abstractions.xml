<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Serialization.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Serialization.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.IServiceCollectionExtensions.AddSerializer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds and configures the specified <see cref="T:Neuroglia.Serialization.ISerializer"/>
            </summary>
            <typeparam name="TSerializer">The type of <see cref="T:Neuroglia.Serialization.ISerializer"/> to register</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <param name="lifetime">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceLifetime"/> of the <see cref="T:Neuroglia.Serialization.ISerializer"/> to add</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Serialization.BinarySerializerBase">
            <summary>
            Represents the base class for all <see cref="T:Neuroglia.Serialization.IBinarySerializer"/> implementations
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.BinarySerializerBase.SupportedMimeTypes">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.BinarySerializerBase.DefaultMimeType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.BinarySerializerBase.DefaultEncoding">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.DeserializeAsync(System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Deserialize``1(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Deserialize(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.DeserializeAsync(System.Byte[],System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Deserialize``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.DeserializeAsync``1(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Serialize(System.Object,System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.SerializeAsync(System.Object,System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Serialize(System.Object,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.SerializeAsync(System.Object,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Serialize(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.SerializeAsync(System.Object,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.BinarySerializerBase.SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Serialization.IBinarySerializer">
            <summary>
            Defines the fundamentals of a service used to serialize and deserialize binary
            </summary>
        </member>
        <member name="T:Neuroglia.Serialization.IJsonSerializer">
            <summary>
            Defines the fundamentals of a service used to serialize and deserialize YAML
            </summary>
        </member>
        <member name="T:Neuroglia.Serialization.ISerializer">
            <summary>
            Defines the fundamentals of a service used to serialize/deserialize objects
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.ISerializer.SupportedMimeTypes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all MIME types that can be serialized and deserialized by the <see cref="T:Neuroglia.Serialization.ISerializer"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.ISerializer.DefaultMimeType">
            <summary>
            Gets the <see cref="T:Neuroglia.Serialization.ISerializer"/>'s default MIME type
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.ISerializer.DefaultEncoding">
            <summary>
            Gets the <see cref="T:Neuroglia.Serialization.ISerializer"/>'s default encoding
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes a value to an output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="value">The value to serialize</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/> to serialize the specified value to</param>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.SerializeAsync(System.Object,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Serializes a value to an output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="value">The value to serialize</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/> to serialize the specified value to</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Serialize(System.Object,System.IO.Stream,System.Type)">
            <summary>
            Serializes a value to an output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="value">The value to serialize</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/> to serialize the specified value to</param>
            <param name="type">The type of the value to serialize</param>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.SerializeAsync(System.Object,System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <summary>
            Serializes a value to an output <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="value">The value to serialize</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/> to serialize the specified value to</param>
            <param name="type">The type of the value to serialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Serialize(System.Object)">
            <summary>
            Serializes a value to a byte array
            </summary>
            <param name="value">The value to serialize</param>
            <returns>A new byte array representing the serialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Serializes a value to a byte array
            </summary>
            <param name="value">The value to serialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new byte array representing the serialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes a value to a byte array
            </summary>
            <param name="value">The value to serialize</param>
            <param name="type">The type of the value to serialize</param>
            <returns>A new byte array representing the serialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.SerializeAsync(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Serializes a value to a byte array
            </summary>
            <param name="value">The value to serialize</param>
            <param name="type">The type of the value to serialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new byte array representing the serialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize a value from an input <see cref="T:System.IO.Stream"/>
            </summary>
            <typeparam name="T">The type of the value to deserialize</typeparam>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to deserialize the value from</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserialize a value from an input <see cref="T:System.IO.Stream"/>
            </summary>
            <typeparam name="T">The type of the value to deserialize</typeparam>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to deserialize the value from</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserialize a value from an input byte array
            </summary>
            <typeparam name="T">The type of the value to deserialize</typeparam>
            <param name="input">The input byte array to deserialize the value from</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.DeserializeAsync``1(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Deserialize a value from an input byte array
            </summary>
            <typeparam name="T">The type of the value to deserialize</typeparam>
            <param name="input">The input byte array to deserialize the value from</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserialize a value from an input <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to deserialize the value from</param>
            <param name="returnType">The type of the value to deserialize</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <summary>
            Deserialize a value from an input <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to deserialize the value from</param>
            <param name="returnType">The type of the value to deserialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserialize a value from an input byte array
            </summary>
            <param name="input">The input byte array to deserialize the value from</param>
            <param name="returnType">The type of the value to deserialize</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializer.DeserializeAsync(System.Byte[],System.Type,System.Threading.CancellationToken)">
            <summary>
            Deserialize a value from an input byte array
            </summary>
            <param name="input">The input byte array to deserialize the value from</param>
            <param name="returnType">The type of the value to deserialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="T:Neuroglia.Serialization.ISerializerProvider">
            <summary>
            Defines the fundamentals of a service used to provide <see cref="T:Neuroglia.Serialization.ISerializer"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetBinarySerializers">
            <summary>
            Gets all registered <see cref="T:Neuroglia.Serialization.IBinarySerializer"/>s
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.IBinarySerializer"/>s</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetTextSerializers">
            <summary>
            Gets all registered <see cref="T:Neuroglia.Serialization.ITextSerializer"/>s
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.ITextSerializer"/>s</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetJsonSerializers">
            <summary>
            Gets all registered <see cref="T:Neuroglia.Serialization.IJsonSerializer"/>s
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.IJsonSerializer"/>s</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetYamlSerializers">
            <summary>
            Gets all registered <see cref="T:Neuroglia.Serialization.IYamlSerializer"/>s
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.IYamlSerializer"/>s</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetXmlSerializers">
            <summary>
            Gets all registered <see cref="T:Neuroglia.Serialization.IXmlSerializer"/>s
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.IXmlSerializer"/>s</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetSerializersFor(System.String)">
            <summary>
            Gets the <see cref="T:Neuroglia.Serialization.ISerializer"/>s that support the specified content type
            </summary>
            <param name="contentType">The content type to serialize/deserialize</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Neuroglia.Serialization.ISerializer"/>s that support the specified content type, if any</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetSerializerFor(System.String)">
            <summary>
            Gets the first registered <see cref="T:Neuroglia.Serialization.ISerializer"/> that support the specified content type
            </summary>
            <param name="contentType">The content type to serialize/deserialize</param>
            <returns>The first registered <see cref="T:Neuroglia.Serialization.ISerializer"/> that support the specified content type, if any</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetSerializer(System.Type)">
            <summary>
            Gets the <see cref="T:Neuroglia.Serialization.ISerializer"/> of the specified type
            </summary>
            <param name="serializerType">The type of <see cref="T:Neuroglia.Serialization.ISerializer"/> to get</param>
            <returns>The <see cref="T:Neuroglia.Serialization.ISerializer"/> of the specified type</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ISerializerProvider.GetSerializer``1">
            <summary>
            Gets the <see cref="T:Neuroglia.Serialization.ISerializer"/> of the specified type
            </summary>
            <typeparam name="TSerializer">The type of <see cref="T:Neuroglia.Serialization.ISerializer"/> to get</typeparam>
            <returns>The <see cref="T:Neuroglia.Serialization.ISerializer"/> of the specified type</returns>
        </member>
        <member name="T:Neuroglia.Serialization.ITextSerializer">
            <summary>
            Defines the fundamentals of a service used to serialize/deserialize text
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The resulting text</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified value
            </summary>
            <param name="value">The value to serialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resulting text</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes the specified value
            </summary>
            <param name="value">The value to serialize</param>
            <param name="type">The type of the value to serialize</param>
            <returns>The resulting text</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.SerializeAsync(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified value
            </summary>
            <param name="value">The value to serialize</param>
            <param name="type">The type of the value to serialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The resulting text</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified text
            </summary>
            <param name="input">The text to deserialize</param>
            <param name="returnType">The expected return type</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.DeserializeAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Deserializes the specified text
            </summary>
            <param name="input">The text to deserialize</param>
            <param name="returnType">The expected return type</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified text
            </summary>
            <typeparam name="T">The expected return type</typeparam>
            <param name="input">The text to deserialize</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Neuroglia.Serialization.ITextSerializer.DeserializeAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Deserializes the specified text
            </summary>
            <typeparam name="T">The expected return type</typeparam>
            <param name="input">The text to deserialize</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The deserialized value</returns>
        </member>
        <member name="T:Neuroglia.Serialization.IXmlSerializer">
            <summary>
            Defines the fundamentals of a service used to serialize and deserialize XML
            </summary>
        </member>
        <member name="T:Neuroglia.Serialization.IYamlSerializer">
            <summary>
            Defines the fundamentals of a service used to serialize and deserialize YAML
            </summary>
        </member>
        <member name="T:Neuroglia.Serialization.SerializerProvider">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Serialization.ISerializerProvider"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.#ctor(System.Collections.Generic.IEnumerable{Neuroglia.Serialization.ISerializer})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Serialization.SerializerProvider"/>
            </summary>
            <param name="serializers">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.ISerializer"/>s</param>
        </member>
        <member name="P:Neuroglia.Serialization.SerializerProvider.Serializers">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Neuroglia.Serialization.ISerializer"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetBinarySerializers">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetJsonSerializers">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetSerializer(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetSerializer``1">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetSerializerFor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetSerializersFor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetTextSerializers">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetXmlSerializers">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.SerializerProvider.GetYamlSerializers">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Serialization.TextSerializerBase">
            <summary>
            Represents the base class for all <see cref="T:Neuroglia.Serialization.ITextSerializer"/> implementations
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.TextSerializerBase.SupportedMimeTypes">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.TextSerializerBase.DefaultMimeType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.TextSerializerBase.DefaultEncoding">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Serialize(System.Object,System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.SerializeAsync(System.Object,System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Serialize(System.Object,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.SerializeAsync(System.Object,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Neuroglia#Serialization#ISerializer#Serialize(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Neuroglia#Serialization#ISerializer#SerializeAsync(System.Object,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Neuroglia#Serialization#ISerializer#Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Neuroglia#Serialization#ISerializer#SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync(System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize``1(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync(System.Byte[],System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync``1(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Serialize(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.SerializeAsync(System.Object,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.Deserialize``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.TextSerializerBase.DeserializeAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
